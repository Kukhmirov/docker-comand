Загрузите образ busybox последней версии  --- docker pull busybox;
Запустите новый контейнер busybox с командой ping сайта netology.ru --- docker run --name pinger -i -t busybox ping -c 7 netology.ru
поименуйте контейнер pinger --- docker rename pinger newpinger
Выведите на список всех контейнеров - запущенных и остановленных --- docker ps -a
Выведите на экран логи контейнера с именем pinger  ---- docker logs pinger
Запустите второй раз контейнера с именем pinger --- docker start pinger
Определите по логам общее количество запусков команды ping и какое общее количество отправленых запросов seq="информация"
Удалите контейнер с именем pinger --- docker rm -f pinger
Удалите образ busybox  --- docker rmi busybox

Загрузите образ node версии 15.14 --- nvm install 15.14
Запустите контейнер node в интерактивном режиме подключения терминала, поименуйте его mynode, передайте две переменные среды NAME=<ваше имя> и SURNAME=<ваша фамилия>
---- docker run --name pinger -it -e NAME=Vitaly -e SURNAME=Kukhmirov -w /app node:15.14-alpine /bin/sh 
В интерактивной среде выполнения node выполните скрипт, который выведет на экран приветсвтие: Привет, <ваше имя> <ваша фамилия>!, эти данные должны быть получены из переменных среды
--- команда в консоле среды - node /src/test.js, в файле test.js - console.log(process.env.NAME + ' ' + process.env.SURNAME);
Остановите контейнер -- docker stop pinger
Удалите образ node версии 15.14 --- docker rmi 'IMAGE ID'


Загрузите образ node версии 15.14
Запустите контейнер с именем first_node из образа node версии 15.14 в фоновом режиме, подключив папку data из текущей директории в /var/first/data контейнера
--- docker run --name first_node -it -v C:\Программирование\netology\docker\data:/var/first/data node:15.14-alpine /bin/sh 
Запустите контейнер с именем second_node из образа node версии 15.14 в фоновом режиме, подключив папку data из текущей директории в /var/second/data контейнера
--- docker run --name second_node -it -v C:\Программирование\netology\docker\data:/var/second/data node:15.14-alpine /bin/sh 
Подключитесь к контейнеру first_node с помощью exec и создайте текстовый файл любого содержания в /var/first/data --- docker exec -d first_node touch /var/first/data/text.txt
Добавьте еще один файл в папку data на хостовой машине
Подключитесь к контейнеру second_node с помощью exec и получите список файлов в директории /var/second/data, выведете на экран содержимое файлов
--- ls /var/second/data/
Остановите оба контейнера --- docker stop $(docker ps -a -q)
Удалите оба контейнера  --- docker rm $(docker ps -a -q)
Удалите образ node версии 15.14 --- docker rmi 'IMAGE ID'